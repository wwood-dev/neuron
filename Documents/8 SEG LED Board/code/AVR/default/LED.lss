
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000124  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000124  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000023  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001d3  00000000  00000000  000001ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000125  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001c7  00000000  00000000  000004e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  000006ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000c4  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000a0  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e2       	ldi	r30, 0x24	; 36
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
unsigned char dat[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71,0x76,0xff};
//uchar date[10]={}
int main(void)
{
   unsigned char i;
	DDRA=0xFF;	
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	8a bb       	out	0x1a, r24	; 26
	DDRC=0xFF;
  c2:	84 bb       	out	0x14, r24	; 20
	//PORTC=0x00;
	while(1)
	{

		PORTA= 0x0f;
		PORTC=~dat[17];
  c4:	20 91 11 01 	lds	r18, 0x0111
  c8:	20 95       	com	r18
//	PORTA=0x55;
	//PORTC=0x00;
	while(1)
	{

		PORTA= 0x0f;
  ca:	7f e0       	ldi	r23, 0x0F	; 15
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  cc:	48 eb       	ldi	r20, 0xB8	; 184
  ce:	50 e0       	ldi	r21, 0x00	; 0
		PORTC=~dat[17];
	    _delay_ms(1000);
		PORTA= 0x1f;
  d0:	3f e1       	ldi	r19, 0x1F	; 31
		for(i=0;i<18;i++)
		{
			PORTA= 0x1f;
			PORTC=~dat[i];
			_delay_ms(500);
			PORTC=0xff;
  d2:	6f ef       	ldi	r22, 0xFF	; 255
//	PORTA=0x55;
	//PORTC=0x00;
	while(1)
	{

		PORTA= 0x0f;
  d4:	7b bb       	out	0x1b, r23	; 27
		PORTC=~dat[17];
  d6:	25 bb       	out	0x15, r18	; 21
  d8:	80 e1       	ldi	r24, 0x10	; 16
  da:	97 e2       	ldi	r25, 0x27	; 39
  dc:	fa 01       	movw	r30, r20
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x20>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e4:	d9 f7       	brne	.-10     	; 0xdc <main+0x1e>
	    _delay_ms(1000);
		PORTA= 0x1f;
  e6:	3b bb       	out	0x1b, r19	; 27
		PORTC=~dat[17];
  e8:	25 bb       	out	0x15, r18	; 21
  ea:	80 e1       	ldi	r24, 0x10	; 16
  ec:	97 e2       	ldi	r25, 0x27	; 39
  ee:	fa 01       	movw	r30, r20
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f6:	d9 f7       	brne	.-10     	; 0xee <main+0x30>
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b1 e0       	ldi	r27, 0x01	; 1
		_delay_ms(1000);
		for(i=0;i<18;i++)
		{
			PORTA= 0x1f;
  fc:	3b bb       	out	0x1b, r19	; 27
			PORTC=~dat[i];
  fe:	8c 91       	ld	r24, X
 100:	80 95       	com	r24
 102:	85 bb       	out	0x15, r24	; 21
 104:	88 e8       	ldi	r24, 0x88	; 136
 106:	93 e1       	ldi	r25, 0x13	; 19
 108:	fa 01       	movw	r30, r20
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 10e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 110:	d9 f7       	brne	.-10     	; 0x108 <main+0x4a>
			_delay_ms(500);
			PORTC=0xff;
 112:	65 bb       	out	0x15, r22	; 21
 114:	11 96       	adiw	r26, 0x01	; 1
		PORTC=~dat[17];
	    _delay_ms(1000);
		PORTA= 0x1f;
		PORTC=~dat[17];
		_delay_ms(1000);
		for(i=0;i<18;i++)
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	a2 31       	cpi	r26, 0x12	; 18
 11a:	b8 07       	cpc	r27, r24
 11c:	79 f7       	brne	.-34     	; 0xfc <main+0x3e>
 11e:	da cf       	rjmp	.-76     	; 0xd4 <main+0x16>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
